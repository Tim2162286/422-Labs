
<project name="Lab 2" default="compile" basedir=".">
  <property file="properties/build.properties"/>

  <condition property="isWindows">
    <os family="windows" />
  </condition>

  <target name="OS-WIN" if="isWindows">
    <property name="apicmd" value="apidoc.cmd"/>
  </target>

  <target name="OS-MAC-UNIX" unless="isWindows">
    <property name="apicmd" value="apidoc"/>
  </target>

  <target name="apidoc" depends="OS-WIN,OS-MAC-UNIX">
    <mkdir dir="${apidoc.dir}"/>
    <exec dir="." executable="${apicmd}">
      <arg line="-i ./${src.dir} -o ./${apidoc.dir}"/>
    </exec>
  </target>


  <!-- init target makes the directory structure. You may not
       require this if you set your environment up by hand. -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${classes.dir}"/>
  </target>

  <!-- Compiles your java files and puts the classes in classes.dir -->
  <target name="compile" depends="init">
    <javac debug="true"
      srcdir="${src.dir}"
      destdir="${classes.dir}">
      <!-- Make sure you set your classpath! -->
      <classpath>
        <!--<fileset dir="${tomcat.home}-${tomcat.port1}/lib" includes="servlet-api.jar"/> -->
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement path="${classes.dir}" />
      </classpath>
    </javac>
  </target>

  <!-- The deploy target will be highly dependent on your deployed app.
       For example, if you are building a web-app, you should include
       commands to copy files over to your deploy directory according
       to the servlet specification, or create a .war file (via dist)
       and copy it over. If you are creating a standalone app (like this
       example does), you can create it in a given directory, or create
       your dist jar first that can be run using java -jar. -->
  <target name="deploy" depends="dist">
    <copy file="${dist.jar}" todir="${tomcat.home}/webapps" overwrite="yes"/>
  </target>
      
  <target name="build" depends="compile,apidoc">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/WEB-INF"/>
    <mkdir dir="${build.home}/WEB-INF/lib"/>
    <mkdir dir="${build.home}/WEB-INF/properties"/>
    <copy todir="${build.home}/WEB-INF">
      <fileset dir="." includes="${classes.dir}/**" excludes="${classes.dir}/driver/**"/>
    </copy>
    <copy todir="${build.home}/WEB-INF/lib">
      <fileset dir="${lib.dir}"/>
    </copy>
    <copy todir="${build.home}/WEB-INF/apidocjs">
      <fileset dir="${apidoc.dir}"/>
    </copy>
    <copy todir="${build.home}/WEB-INF/properties">
      <fileset dir="${properties.dir}"/>
    </copy>
    <copy file="web.xml" tofile="${build.home}/WEB-INF/web.xml"/>
  </target>
    
  <!-- This example dist target merely jars up the webapp files. -->
  <target name="dist" depends="build">
    <jar destfile="${dist.jar}" basedir="${build.home}">
    </jar>
  </target>

  <!-- submit creates a single jarfile that you will upload to the
       Gradebook channel on the class portal. -->
  <target name="submit" depends="dist">
    <jar destfile="${submit.jar}" basedir="." includes="README.txt,build.properties,build.xml,web.xml,${src.dir}/**,${docs.dir}/**,${javadoc.dir}/**,${properties.dir}/**,${lib.dir}/**,${classes.dir}/**">
     </jar>
  </target>

  <!-- Clean -->
  <target name="clean">
    <delete file="${dist.jar}"/>
    <delete dir="${build.home}"/>
    <delete dir="${classes.dir}"/>
    <delete dir="${apidoc.dir}"/>
  </target>

  <!-- Clean all -->
  <target name="cleanall" depends="clean">
    <delete file="${submit.jar}"/>
  </target>

</project>
  

